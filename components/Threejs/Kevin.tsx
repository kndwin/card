/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import {useFrame, useThree} from '@react-three/fiber'
import {useMousePosition} from 'hooks'

type GLTFResult = GLTF & {
  nodes: {
    Sphere: THREE.Mesh
    Sphere001: THREE.Mesh
    Sphere002: THREE.Mesh
    Torus: THREE.Mesh
    Plane: THREE.Mesh
  }
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

export default function FaceModel(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/kevin.glb') as GLTFResult
	
	const { x, y } = useMousePosition()
	const { camera } = useThree()

	let vectorToLookAt = new THREE.Vector3( x, -y - 100, -10).unproject(camera)

	useFrame(() => {
		if (group.current) {
			group.current.lookAt(vectorToLookAt)
		}
	})

	return (
		<group ref={group} {...props} dispose={null}>
			<mesh geometry={nodes.Sphere.geometry} material={materials['Material.002']} scale={1.27} />
      <mesh
        geometry={nodes.Sphere001.geometry}
        material={nodes.Sphere001.material}
        position={[0, 0.96, 0]}
        scale={1.93}
      />
      <mesh geometry={nodes.Sphere002.geometry} material={nodes.Sphere002.material} />
      <mesh geometry={nodes.Torus.geometry} material={nodes.Torus.material} position={[0, -0.01, 0.09]} />
      <mesh
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
        position={[0, 3.29, -0.01]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.28}
      />
    </group>
  )
}

useGLTF.preload('/kevin.glb')
